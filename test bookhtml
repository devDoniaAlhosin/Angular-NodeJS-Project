// import { Component } from '@angular/core';
// import { CommonModule } from '@angular/common';
// import { BookService } from '../../../core/services/book-services.service';
// import { Books } from '../../../Shared/models/booksInterface';
// import { FormsModule } from '@angular/forms';

// @Component({
//   selector: 'app-books-table',
//   standalone: true,
//   imports: [CommonModule,FormsModule ],
//   templateUrl: './books-table.component.html',
//   styleUrls: ['./books-table.component.css']
// })
// export class BooksTableComponent {
//   books: Books[] = [];
//   selectedBook: Books | null = null;

//   isAddBookModalOpen = false;
//   // isUpdateFormOpen = false;
//   // newBook: Books = { _id:'',title: '', image: '', genre: [], author: [] };
//   newBook: Partial<Books> = {
//     title: '',
//     genre: [],
//     author: [],
//     image: '',
//   };

//   constructor(private booksService: BookService) {}

//   ngOnInit(): void {
//     this.booksService.getBooks().subscribe((data) => {
//       this.books = data;
//     },
//     (error) => {
//       console.error('Error fetching books:', error);
//     });
//   }
//   onUpdate(book: Books): void {
//     this.selectedBook = { ...book };
//     // this.isUpdateFormOpen = true;
//   }

//   // onSubmitUpdate(): void {

//   //   if (this.selectedBook) {
//   //     this.booksService.updateBook(this.selectedBook._id, this.selectedBook).subscribe(
//   //       (res) => {
//   //         console.log('Book updated successfully:', res);
//   //         this.selectedBook = null;
//   //         // this.isUpdateFormOpen = false;
//   //         this.loadBooks(); // Refresh the list after update
//   //       },
//   //       (error) => {
//   //         console.error('Error updating book:', error);
//   //       }
//   //     );
//   //   }
//   // }
//   cancelUpdate() {
//     // this.isUpdateFormOpen = false;
//     this.selectedBook = null;
//   }

//   onDelete(_id: string): void {
//     this.booksService.deleteBook(_id).subscribe(() => {
//       this.books = this.books.filter(b => b._id !== _id);
//     });
//   }



//   openAddBookModal(): void {
//     this.isAddBookModalOpen = true;
//   }
//   closeAddBookModal(): void {
//     this.isAddBookModalOpen = false;
//     this.newBook =  {
//       title: '',
//       genre: [],
//       author: [],
//       image: '',
//     };
//   }

//   convertToArray(input: string): { _id: string }[] {
//     return input.split(',').map(item => {
//       const id = item.trim();
//       if (id) {
//         return { _id: id };
//       }
//       return null;
//     }).filter(item => item !== null) as { _id: string }[];
//   }

//   // onAddBook(): void {
//   //   // Ensure genre and author are arrays of objects with _id property
//   //   if (typeof this.newBook.genre === 'string') {
//   //     this.newBook.genre = this.convertToArray(this.newBook.genre);  // Convert from string to object array
//   //   }

//   //   if (typeof this.newBook.author === 'string') {
//   //     this.newBook.author = this.convertToArray(this.newBook.author);  // Convert from string to object array
//   //   }

//   //   // Validate genre and author arrays
//   //   if (!Array.isArray(this.newBook.genre) || !Array.isArray(this.newBook.author)) {
//   //     console.error('Genre or Author is not an array');
//   //     return;
//   //   }

//   //   const isGenreValid = this.newBook.genre.every(g => g._id && typeof g._id === 'string');
//   //   const isAuthorValid = this.newBook.author.every(a => a._id && typeof a._id === 'string');

//   //   if (!isGenreValid) {
//   //     console.error('Invalid genre data');
//   //     return;
//   //   }

//   //   if (!isAuthorValid) {
//   //     console.error('Invalid author data');
//   //     return;
//   //   }

//   //   // If validation passes, add the book
//   //   this.booksService.addBook(this.newBook as Books).subscribe(
//   //     (response: Books) => {
//   //       console.log('Book added successfully:', response);
//   //       this.books.push(response);
//   //       this.closeAddBookModal();
//   //       this.loadBooks();
//   //     },
//   //     (error) => {
//   //       console.error('Error adding book:', error);
//   //     }
//   //   );
//   // }


//   onAddBook(): void {
//     // Ensure genre and author are arrays of objects with _id property
//     if (typeof this.newBook.genre === 'string') {
//       this.newBook.genre = this.convertToArray(this.newBook.genre);  // Convert from string to object array
//     }

//     if (typeof this.newBook.author === 'string') {
//       this.newBook.author = this.convertToArray(this.newBook.author);  // Convert from string to object array
//     console.log(this.newBook.author)
//     }

//     // Validate genre and author arrays
//     if (!Array.isArray(this.newBook.genre) || !Array.isArray(this.newBook.author)) {
//       console.error('Genre or Author is not an array');
//       return;
//     }

//     // const isGenreValid = this.newBook.genre.every(g => g._id && typeof g._id === 'string');
//     // const isAuthorValid = this.newBook.author.every(a => a._id && typeof a._id === 'string');

//     // if (!isGenreValid) {
//     //   console.error('Invalid genre data');
//     //   return;
//     // }

//     // if (!isAuthorValid) {
//     //   console.error('Invalid author data');
//     //   return;
//     // }

//     // If validation passes, add the book
//   //   this.booksService.addBook(this.newBook as Books).subscribe(
//   //     (response: Books) => {
//   //       console.log('Book added successfully:', response);
//   //       this.books.push(response);
//   //       this.closeAddBookModal();
//   //       this.loadBooks();
//   //     },
//   //     (error) => {
//   //       console.error('Error adding book:', error);
//   //     }
//   //   );
//   // }


//    // Method to load books (fetch from the backend)
//    loadBooks() {
//     this.booksService.getBooks().subscribe((data: Books[]) => {
//       this.books = data;
//     });
//    }}

//   isLastGenre(genreId: string): boolean {
//     if (this.selectedBook?.genre && this.selectedBook.genre.length) {
//       // Compare the genreId with the _id of the last genre in the array
//       return this.selectedBook.genre[this.selectedBook.genre.length - 1]._id === genreId;
//     }
//     return false; // Default to false if selectedBook or selectedBook.genre is undefined or empty
//   }

//   isLastAuthor(authorId: string): boolean {
//     if (this.selectedBook?.author && this.selectedBook.author.length) {
//       // Compare the authorId with the _id of the last author in the array
//       return this.selectedBook.author[this.selectedBook.author.length - 1]._id === authorId;
//     }
//     return false; // Default to false if selectedBook or selectedBook.author is undefined or empty
//   }




//   }
